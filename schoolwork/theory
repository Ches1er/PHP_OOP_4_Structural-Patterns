
https://www.youtube.com/watch?v=4EKYyG9U9I4

            Structural Patterns. Архитектурные паттерны

    Адаптер
Адаптирует функционал для того, чтобы он поддерживался каким-то заданным интерфейсом.
Есть класс listviewer и есть класс репозиторий, который нам предоставляет список
пользователей. Задача состоит в том, чтобы вывести всех пользователей через лист
вьюер.

    DataMapper
Задача этого класса конвертировать один тип объекта в другой тип объект. Например
мы получаем сущность Юзер из базы данных, которая характеризуется айди, именем и
паролем. И нам надо эту сущность подготовить для передачи клиенту, допустим
мы хотим кроме логина с паролем, передать время его регистрации, которое в бд
указано в формате time(), для этого время надо подготовить в удобоваримом виде,
т.е. создать класс, изменяющий экземпляр.

    Proxy
Паттерн заместитель.
Является суррогатом другого объекта и контролирует доступ к нему, ограничивает
или расширяет некоторые методы.

    Decorator

Динамическое расширение функционала. Допустим у нас есть какой-либо интерфейс
У него уже есть ряд реализаций. Мы делаем абстрактный класс, который реализует
этот же интерфейс и хранит в себе экземпляр самого интерфейса. Для экземпляра
можно использовать бесчисленное кол-во декораторов.

    Инверсия управление или внедрение зависимостей????

    Facade
Когда мы скрываем функционал под какой-то оберткой. Класс выполняет набор сложных
действий, а для нас предоставляет пару удобных методов.

    Fluent Interface
Сделать такой код, который легко читается непосредственно на натуралном языке.
$q = $builder->select("id")->from("tablename")->where("x<5")->create();


